---
export interface Props {
    name: string;
    type?: string;
    distances?: string[];
    price?: string;
    images?: string[];
    detailsUrl?: string;
    saleStatus?: string;
    date: string;
    country?: string;
    description?: string;
    whatsapp?: string;
    link?: string;
    difficulty?: "Fácil" | "Médio" | "Difícil" | "Extremo";
}

const {
    name,
    type,
    distances,
    price,
    images,
    detailsUrl,
    saleStatus,
    date,
    country,
    description,
    whatsapp,
    link,
    difficulty,
} = Astro.props;

const imageUrl = images && images.length > 0 ? images[0] : "/placeholder.jpg";
const targetUrl = detailsUrl || link || "#";

const getDifficultyColor = (diff: string) => {
    switch (diff) {
        case "Fácil":
            return "bg-green-100 text-green-800";
        case "Médio":
            return "bg-yellow-100 text-yellow-800";
        case "Difícil":
            return "bg-orange-100 text-orange-800";
        case "Extremo":
            return "bg-red-100 text-red-800";
        default:
            return "bg-gray-100 text-gray-800";
    }
};

const difficultyColor = difficulty ? getDifficultyColor(difficulty) : "";
---

<div
    class="bg-white rounded-lg shadow-md overflow-hidden transition-transform duration-300 hover:shadow-lg hover:-translate-y-1"
>
    <div class="relative h-48 overflow-hidden">
        <img
            src={imageUrl}
            alt={name}
            class="w-full h-full object-cover"
            loading="lazy"
        />
        {
            saleStatus && (
                <div class="absolute top-4 right-4 bg-green-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                    {saleStatus}
                </div>
            )
        }
        {
            difficulty && (
                <div class="absolute top-4 left-4">
                    <span
                        class={`text-xs px-2 py-1 rounded-full font-medium ${difficultyColor}`}
                    >
                        {difficulty}
                    </span>
                </div>
            )
        }
    </div>
    <div class="p-6">
        <div class="flex justify-between items-start mb-2">
            <h3 class="text-xl font-bold text-gray-800">{name}</h3>
            {
                country && (
                    <span class="text-sm text-gray-500 flex items-center">
                        <svg
                            class="w-4 h-4 mr-1"
                            fill="currentColor"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                fill-rule="evenodd"
                                d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
                                clip-rule="evenodd"
                            />
                        </svg>
                        {country}
                    </span>
                )
            }
        </div>

        {type && <p class="text-gray-600 mb-3">{type}</p>}

        <div class="flex items-center text-gray-700 mb-3">
            <svg
                class="w-5 h-5 mr-2 text-blue-600"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    fill-rule="evenodd"
                    d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                    clip-rule="evenodd"></path>
            </svg>
            <span>{date}</span>
        </div>

        {
            distances && distances.length > 0 && (
                <div class="mb-3">
                    <p class="text-sm font-medium text-gray-700 mb-1">
                        Distâncias:
                    </p>
                    <div class="flex flex-wrap gap-1">
                        {distances.map((distance) => (
                            <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                                {distance}
                            </span>
                        ))}
                    </div>
                </div>
            )
        }

        {
            price && (
                <div class="mb-4">
                    <p class="text-lg font-semibold text-blue-600">{price}</p>
                </div>
            )
        }

        {
            description && (
                <p class="text-gray-600 mb-4 line-clamp-3">{description}</p>
            )
        }

        <div class="flex flex-wrap gap-2">
            <a
                href={`/corridas/${name
                    .toLowerCase()
                    .replace(/[^\w\s-]/g, "")
                    .replace(/\s+/g, "-")
                    .trim()}`}
                class="flex-1 bg-blue-600 text-white text-center px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
                Ver Detalhes
            </a>
            {
                whatsapp && (
                    <a
                        href={whatsapp}
                        class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors flex items-center"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        <svg
                            class="w-5 h-5 mr-1"
                            fill="currentColor"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                            <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                        </svg>
                        WhatsApp
                    </a>
                )
            }
        </div>
    </div>
</div>
